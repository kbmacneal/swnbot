// Generated by https://quicktype.io

namespace swnbot.Classes
{
    using System;
    using System.Collections.Generic;
    using System.Collections;
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Linq;

    public class RollDamage
    {
        public string Roll { get; set; }
        public int OptionalMod { get; set; }
        public int DexMod { get; set; }
        public string DiceResults { get; set; }
        public int Result { get; set; }

    }   

    public partial class Weapon
    {
        [JsonProperty("Name")]
        public string Name { get; set; }

        [JsonProperty("Damage")]
        public string Damage { get; set; }

        [JsonProperty("Range")]
        public string Range { get; set; }

        [JsonProperty("Cost")]
        public string Cost { get; set; }

        [JsonProperty("Magazine")]
        public string Magazine { get; set; }

        [JsonProperty("Encumbrance")]
        public string Encumbrance { get; set; }

        [JsonProperty("Attribute", NullValueHandling = NullValueHandling.Ignore)]
        public Attribute? Attribute { get; set; }

        [JsonProperty("TechLevel")]
        public int TechLevel { get; set; }

        private object RollRangedDamage(character character, int optional_mod = 0)
        {
            int modifier = 0;
            RollDamage rd = new RollDamage();

            string title = character.name + "rolls damage";

            modifier += stat_mod.mod_from_stat_val((int)helpers.GetPropValue(character, this.Attribute.ToString().ToLower()));
            rd.DexMod = stat_mod.mod_from_stat_val((int)helpers.GetPropValue(character, this.Attribute.ToString().ToLower()));

            List<int> rolls = new List<int>();

            rolls = Commands.roller.Roll(this.Damage);
            rd.Roll = this.Damage;
            modifier += rolls.Sum();
            modifier += optional_mod;
            rd.OptionalMod = optional_mod;
            rd.Result = modifier;
            rd.DiceResults = "(" + string.Join(", ", rolls) + ")";

            return helpers.ObjToEmbed(rd, title);
        }
    }

    public enum Attribute { Dexterity };

    public partial class Weapon
    {
        public static Weapon[] FromJson(string json) => JsonConvert.DeserializeObject<Weapon[]>(json, Converter.Settings);
    }



    internal class AttributeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Attribute) || t == typeof(Attribute?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Dexterity")
            {
                return Attribute.Dexterity;
            }
            throw new Exception("Cannot unmarshal type Attribute");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Attribute)untypedValue;
            if (value == Attribute.Dexterity)
            {
                serializer.Serialize(writer, "Dexterity");
                return;
            }
            throw new Exception("Cannot marshal type Attribute");
        }

        public static readonly AttributeConverter Singleton = new AttributeConverter();
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();

        
    }
}
